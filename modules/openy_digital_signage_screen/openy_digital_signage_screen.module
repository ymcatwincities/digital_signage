<?php

/**
 * @file
 * Hook implementations for openy_digital_signage_screen module.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Datetime\DateHelper;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_ENTITY_TYPE_build_defaults_alter().
 */
function openy_digital_signage_screen_openy_digital_signage_screen_build_defaults_alter(&$build, $entity, $view_mode) {
  // Empty.
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function openy_digital_signage_screen_openy_digital_signage_screen_view(&$build, $entity, $display, $view_mode) {
  // Empty.
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function openy_digital_signage_screen_node_view_alter(&$build, $entity, $display, $view_mode = '') {
  if ($entity->bundle() != 'screen_content') {
    return;
  }
  // Attach libraries.
  $build['#attached']['library'][] = 'openy_digital_signage_screen/openy_ds_screen_theme';
  $build['#attached']['library'][] = 'openy_digital_signage_screen/openy_ds_screen_handler';

  // Disable cache for authorised user.
  $user = \Drupal::currentUser();
  if ($user->isAuthenticated()) {
    $build['#cache']['max-age'] = 0;
    $build['#cache']['contexts'] = [];
  }

  // Remove contextual links.
  unset($build['#contextual_links']);
  foreach (Element::children($build) as $element) {
    foreach (Element::children($build[$element]) as $region) {
      if (empty($build[$element][$region]) || $region == 'classes') {
        continue;
      }
      $render = Element::children($build[$element][$region]);
      if (empty($render)) {
        continue;
      }
      foreach ($render as $block_id) {
        unset($build[$element][$region][$block_id]['#contextual_links']);
      }
    }
  }
}

/**
 * Implements hook_preprocess().
 */
function openy_digital_signage_screen_preprocess_block(&$variables) {
  $block_plugin_manager = \Drupal::service('plugin.manager.block');
  $definition = $block_plugin_manager->getDefinition($variables['plugin_id']);
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = array();
  }
  $variables['attributes']['class'][] = 'block';
  $variables['attributes']['class'][] = 'block-wrapper';
  $variables['attributes']['class'][] = 'block-provider--' . $definition['provider'];
  $variables['attributes']['class'][] = 'block-plugin-id--' . $variables['plugin_id'];
  if ($definition['provider'] == 'block_content') {
    $variables['attributes']['class'][] = 'block-block-content-bundle--' . $variables['content']['#block_content']->bundle();
  }
}

/**
 * Implements hook_theme().
 */
function openy_digital_signage_screen_theme($existing, $type, $theme, $path) {
  return [
    'page__screen' => [
      'template' => 'pages/page--screen',
    ],
    'page__screen_content' => [
      'template' => 'pages/page--screen-content',
    ],
    'screen_schedule_ui' => [
      'variables' => [
        'schedule' => '',
        'data' => '',
      ],
      'template' => 'screen-schedule-ui',
    ],
    'screen_schedule_timeline' => [
      'variables' => [
        'screen' => NULL,
        'schedule' => NULL,
        'schedule_items' => [],
        'fallback_item' => NULL,
        'date' => NULL,
        'calendar' => NULL,
        'year' => NULL,
        'month' => NULL,
        'day' => NULL,
      ],
      'template' => 'screen-schedule-timeline',
    ],
    'screen_schedule_calendar' => [
      'variables' => [
        'year' => NULL,
        'month' => NULL,
        'day' => NULL,
        'overrides' => NULL,
        'screen' => NULL,
      ],
      'template' => 'screen-schedule-calendar',
    ],
  ];
}

/**
 * Implements hook_theme_HOOK_alter().
 */
function openy_digital_signage_screen_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'entity.openy_digital_signage_screen.canonical') {
    array_push($suggestions, 'page__screen');
  }
  elseif ($route_name == 'entity.node.canonical') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node->bundle() == 'screen_content') {
      array_push($suggestions, 'page__screen_content');
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function openy_digital_signage_screen_preprocess_html(&$variables) {
  $classes = ['page-schedule'];
  $route_name = \Drupal::service('current_route_match')->getRouteName();

  if (empty($variables['attributes'])) {
    $variables['attributes'] = new Attribute();
  }

  if ($route_name == 'entity.openy_digital_signage_screen.canonical') {
    $variables['attributes']->addClass($classes);
  }

  if ($route_name == 'entity.node.canonical' && $variables['node_type'] == 'screen_content') {
    $variables['page_top']['toolbar']['#access'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function openy_digital_signage_screen_preprocess_page__screen(&$variables) {
  $variables['base_path'] = base_path();
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'entity.node.canonical') {
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node->bundle() == 'screen_content') {
      unset($variables['page']['content']['tabs']);
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function openy_digital_signage_screen_preprocess_html__screen(&$variables) {
  $variables['base_path'] = base_path();
  $route_name = \Drupal::routeMatch()->getRouteName();
  if ($route_name == 'entity.openy_digital_signage_screen.canonical') {
    /** @var \Drupal\Core\Template\Attribute $attributes */
    $attributes = $variables['attributes'];
    $attributes->addClass('ds-screen');
    $attributes->addClass('ds-screen-full-size');
  }
}

/**
 * Implements hook_preprocess_page().
 */
function openy_digital_signage_screen_preprocess_page__screen_content(&$variables) {
  openy_digital_signage_screen_preprocess_page__screen($variables);
  \Drupal::service('page_cache_kill_switch')->trigger();
}

/**
 * Implements hook_ds_version().
 */
function openy_digital_signage_screen_ds_version() {
  return '0.0.2';
}

/**
 * Implements hook_preprocess_THEME().
 */
function openy_digital_signage_screen_preprocess_screen_schedule_timeline(&$variables) {
  $variables['hours'] = [
    '12am',
    '3am',
    '6am',
    '9am',
    '12pm',
    '3pm',
    '6pm',
    '9am',
    '12am',
  ];

  $schedule = $variables['schedule'];
  $schedule_items = [];
  foreach ($schedule as $item) {
    $schedule_item = $item['item'];

    $from_ts = $item['from_ts'];
    $to_ts = $item['to_ts'];
    $from_hours = date('H', $from_ts) + (date('i', $from_ts) / 60);
    $to_hours = date('H', $to_ts) + (date('i', $to_ts) / 60);
    $formatted_time = date('g:ia', $from_ts) . 'â€“' . date('g:ia', $to_ts);

    $view_link = Url::fromRoute('screen_schedule.view_schedule_item', [
      'screen' => $variables['screen']->id(),
      'schedule_item' => $schedule_item->id(),
      'from' => $from_ts,
      'to' => $to_ts,
    ])->toString();
    $edit_link = Url::fromRoute('screen_schedule.edit_schedule_item', [
      'screen' => $variables['screen']->id(),
      'schedule_item' => $schedule_item->id(),
    ])->toString();

    $schedule_items[$schedule_item->id()] = [
      'from' => $from_hours,
      'to' => $to_hours,
      'from_timestamp' => $from_ts,
      'to_timestamp' => $to_ts,
      'type' => $schedule_item->show_date->value ? 'regular' : 'override',
      'id' => $schedule_item->id(),
      'title' => $schedule_item->label(),
      'status' => $schedule_item->status->value,
      'formatted_time' => $formatted_time,
      'view_link' => $view_link,
      'edit_link' => $edit_link,
    ];
  }
  $variables['add_link'] = Url::fromRoute('screen_schedule.add_schedule_item', [
    'screen' => $variables['screen']->id(),
  ])->toString();
  $variables['schedule_items'] = $schedule_items;
  $variables['screen_id'] = $variables['screen']->id();
  $variables['current_time'] = date('H', $_SERVER['REQUEST_TIME']) + (date('i', $_SERVER['REQUEST_TIME']) / 60);

  $id = $variables['screen']->fallback_content->entity ? $variables['screen']->fallback_content->entity->id() : NULL;
  if ($id) {
    $variables['fallback_item'] = [
      'title' => t('Fallback content'),
      'id' => $variables['screen']->fallback_content->entity->id(),
      'view_link' => Url::fromRoute('screen_schedule.view_screen_content', [
        'screen' => $variables['screen']->id(),
        'screen_content' => $variables['screen']->fallback_content->entity->id(),
      ])->toString(),
    ];
  }

  $redraw_link_route_options = [
    'screen' => $variables['screen']->id(),
    'year' => $variables['year'],
    'month' => $variables['month'],
    'day' => $variables['day'],
  ];
  $redraw_link = Link::createFromRoute(
    t('Update page'),
    'screen_schedule.redraw_screen_schedule_timeline',
    $redraw_link_route_options
  )->toRenderable();
  $redraw_link['#attributes'] = [
    'class' => ['use-ajax', 'timeline-redraw-link', 'button'],
  ];
  $variables['redraw_link'] = $redraw_link;
}

/**
 * Implements hook_preprocess_THEME().
 */
function openy_digital_signage_screen_preprocess_screen_schedule_calendar(&$variables) {
  $prev_month = Link::createFromRoute('<', 'screen_schedule.redraw_screen_schedule_timeline', [
    'screen' => $variables['screen']->id(),
    'month' => $variables['month'] - 1 ?: 12,
    'year' => $variables['month'] - 1 ? $variables['year'] : $variables['year'] - 1,
    'day' => 1,
  ])->toRenderable();
  $prev_month['#attributes'] = [
    'class' => [
      'prev-month-link',
      'use-ajax',
    ],
  ];
  $variables['prev_month'] = $prev_month;

  $next_month = Link::createFromRoute('>', 'screen_schedule.redraw_screen_schedule_timeline', [
    'screen' => $variables['screen']->id(),
    'month' => $variables['month'] + 1 > 12 ? 1 : $variables['month'] + 1,
    'year' => $variables['month'] + 1 > 12 ? $variables['year'] + 1 : $variables['year'],
    'day' => 1,
  ])->toRenderable();
  $next_month['#attributes'] = [
    'class' => [
      'next-month-link',
      'use-ajax',
    ],
  ];
  $variables['next_month'] = $next_month;

  $variables['current_month'] = DateHelper::monthNames()[$variables['month']] . ' ' . $variables['year'];

  $today = date('Y-m-d');
  $selected = sprintf('%d-%02d-%02d', $variables['year'], $variables['month'], $variables['day']);

  $weekdays = DateHelper::weekDaysAbbr(TRUE);
  $variables['weekdays'] = DateHelper::weekDaysOrdered($weekdays);
  $variables['weeks'] = [];

  $schedule_manager = \Drupal::service('openy_digital_signage_schedule.manager');
  $days_with_overrides = $schedule_manager->daysWithOverrides($variables['screen']->screen_schedule->entity, $variables['year'], $variables['month']);

  $first = new DrupalDateTime(sprintf('%d-%02d-%02d', $variables['year'], $variables['month'], 1));
  $global_first_day = \Drupal::config('system.date')->get('first_day');

  $first_month_weekday = DateHelper::dayOfWeek($first);
  $days_in_month = DateHelper::daysInMonth($first);

  $days = [];
  while ($global_first_day != $first_month_weekday) {
    $days[] = '';
    $global_first_day = ($global_first_day + 1) % 7;
  }
  for ($i = 1; $i <= $days_in_month; $i++) {
    $date = sprintf('%d-%02d-%02d', $variables['year'], $variables['month'], $i);

    $link = Link::createFromRoute($i, 'screen_schedule.redraw_screen_schedule_timeline', [
      'screen' => $variables['screen']->id(),
      'year' => $variables['year'],
      'month' => $variables['month'],
      'day' => $i,
    ])->toRenderable();
    $link['#attributes'] = ['class' => ['use-ajax']];
    if ($date == $today) {
      $link['#attributes']['class'][] = 'today';
    }
    if ($date == $selected) {
      $link['#attributes']['class'][] = 'selected';
    }
    if (isset($days_with_overrides[$date])) {
      $link['#attributes']['class'][] = 'has-override';
    }
    $days[] = [
      'class' => '',
      'content' => $link,
    ];
  }
  $variables['weeks'] = array_chunk($days, 7);
}

/**
 * Implements hook_entity_operation().
 */
function openy_digital_signage_screen_entity_operation(EntityInterface $entity) {
  if ($entity->getEntityTypeId() != 'openy_digital_signage_screen') {
    return;
  }
  $operations = [];
  $operations['schedule'] = [
    'title' => t('Manage schedule'),
    'url' => Url::fromRoute('entity.openy_digital_signage_screen.schedule', [
      'openy_digital_signage_screen' => $entity->id(),
    ]),
    'weight' => -50,
  ];

  return $operations;
}
